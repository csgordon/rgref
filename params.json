{
  "name": "Rgref",
  "tagline": "Gradual Verification Through Rely-Guarantee References",
  "body": "### What are Rely-Guarantee References?\r\nRely-Guarantee references are a marriage of ideas from rely-guarantee reasoning to ideas from reference immutability.\r\n\r\nThe core ideas of the approach are to associate a\r\nrely relation and a guarantee relation with each reference.  The guarantee limits the actions\r\n(side effects) that may be performed using that reference, and thus generalizes a family of type\r\nsystems called reference immutability, where a mutability restriction is associated with each\r\nreference.  The rely summarizes the guarantees of all possible aliases (an invariant preserved on the creation of any new alias).\r\n\r\nThese relations grant us two useful things:\r\n\r\n1. The guarantee provides fine-grained control over what mutation a function may perform on its arguments.\r\n2. The rely permits us to add to a reference a refinement predicate (logical\r\nformula) that must hold of a reference's referent. If a predicate is preserved by the rely\r\nrelation (i.e. if it is true in one state, and there is another state related to the first by the\r\nrely relation, then it is true in the second state as well), then it is safe to assume that\r\npredicate holds in general because the actions possible through any other alias are subsumed by\r\nthe rely.  For more technical details, see Publications below.\r\n\r\nThere are three implementations of rely-guarantee references:\r\n\r\n- [csgordon/rgref](https://github.com/csgordon/rgref): A sequential rely-guarantee implementation as a shallow axiomatic DSL in Coq.\r\n- [csgordon/rgref-concurrent](https://github.com/csgordon/rgref-concurrent): A *concurrent* rely-guarantee implementation as a shallow axiomatic DSL in Coq, with examples of proving properties of lock-free data structures.\r\n- [csgordon/rghaskell](https://github.com/csgordon/rghaskell): A restricted version of concurrent RGRefs implemented as a library for [Liquid Haskell](https://github.com/ucsd-progsys/liquidhaskell) (which therefore uses inference and SMT to complete proofs, rather than interactive Coq proofs)\r\n\r\nThe Coq DSLs are implemented for Coq 8.4.  The Liquid Haskell embedding requires a specific version of Liquid Haskell (see that page for details).\r\n\r\nThere's also an incomplete Agda implementation I can dig up by request.\r\n\r\n### Virtual Machine\r\nFor a virtual machine image (VirtualBox / .ova) containing the concurrent RGRef Coq DSL, the concurrent RGRef Liquid Haskell embedding, and all dependencies, click [here](https://cs.drexel.edu/~csgordon/rgref/rgref.ova) (note: 2.7GB).  \r\n\r\n- Username: rely\r\n- Password: guarantee\r\n\r\nNotably, the VM includes:\r\n- The Coq DSL and examples pre-built in the ```rgref-concurrent``` directory\r\n    + You can rebuild by running ```make clean``` and ```./compile.sh``` in that directory\r\n- ProofGeneral (```proofgeneral```) and CoqIDE (```coqide``` or ```coqide.opt```) set up and ready to go\r\n- The Liquid Haskell embedding checked out into the ```rghaskell``` directory\r\n    + Run the ```test.sh``` script to compile the examples\r\n- The appropriate version of Liquid Haskell compiled and installed (```liquid```) into a Cabal sandbox inside ```rghaskell```\r\n\r\nAll relevant commands (```proofgeneral```, ```coqtop```, ```liquid```, etc.) are on the default PATH when you open a terminal.\r\n\r\n### Publications\r\nFor (academic) descriptions of how RGRefs can be used, see:\r\n- [Rely-Guarantee References for Refinement Types over Aliased Mutable Data](http://dl.acm.org/citation.cfm?id=2462160).  Colin S. Gordon, Michael D. Ernst, and Dan Grossman.  In Proceedings of PLDI 2013.\r\n- [Verifying Concurrent Programs by Controlling Alias Interference](https://dlib.lib.washington.edu/researchworks/handle/1773/26020). Colin Stebbins Gordon.  PhD Dissertation, University of Washington, 2014.\r\n\r\nThe implementations contain examples not described in the above publications.\r\n\r\n### Support or Contact\r\nIf you have further questions or encounter technical difficulties, email @csgordon (csgordon@cs.drexel.edu).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}